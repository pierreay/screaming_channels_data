* About

Git-annex repository of datasets for the Screaming Channels on BLE project.

* Datasets

Those directories contains full or partials datasets recorded using our
=collect.sh= script.

- =231213_single-cable_raw= :: The firmware is close as stock -- only using AES
  software and increased TX power. We use a pairing to generate keys, with
  Butterfly and WHAD on the attacker side. We attacked the amplitude of the
  signal received at 2.548 GHz during the legitimate BLE transmission emitted
  when a connection is started. We do not used any averaging or instrumeted AES
  repetitions -- only offline triggering and trace alignment. We were able to
  retrieve 5 bytes of the key with a very low median/mean PGE, but the maximum
  PGE of only 1 byte don't allow an efficient bruteforce.
- =231220_single-1m-rand_raw= :: This dataset contains 16k FF traces for the
  attack subset. Just like =231213_single-cable_raw=, but with an antenna and
  with 1m of theoretical distance (40 dB of attenuation = real distance of 30
  cm + 10 dB of insertion loss of the attenuator).
- 231222_single-cable-balanced_raw ::
  - 64k of training/profiling traces and 16k of attack traces
  - Balanced generator of Google/Karel
  - RF coax. cable
  - Custom input mechanism
  - No repetitions
- =231223_single-1m-pair_raw= :: This dataset contains 32k FF traces for the
  attack subset. Recording used an antenna with 1m of theoretical distance like
  the =231220_single-1m-rand_raw= dataset. The inputs were generated using a 
  pairing. There were no instrumentation of the AES nor repetitions.
- [[file:240110_single-leak-pairing-1m-lna_raw/][240110_single-leak-pairing-1m-lna_raw]] ::
  - 16k FF traces for attack.
  - Antenna at 1m of real distance with LNA.
  - Input generated using pairing from light/non-instrumented firmware.
  - No repetitions.

* Recordings

Those directories contains various signals used in experiments.

- [[file:240108_advertisement][240108_advertisement]] :: BLE advertisement recorded on channel 37 at 2.402 GHz
  using a coaxial cable in anechoic box. Used to demodulate data from the
  recording and compare with the reported data from the sniffer. Results:
  demodulation successful with GR, partially successful with custom Python
  script.
- [[file:240109_leakage_for_demod/][240109_leakage_for_demod]] :: Recording of BLE channel + AES leak to try
  demodulating it. Same hardware setup as =240108_advertisement=. Provides
  =whadsniff= logs as well.
- [[file:240111_leakage_for_demod_low_sr][240111_leakage_for_demod_low_sr]] :: Same as =240109_leakage_for_demod= but with
  lower sample rate.

* Organization

Here is an example of a complete dataset stored after an attack:

#+begin_src bash :results output :exports results :eval never
tree -alh -I "attack/" -I "train/" -L 2 231213_single-cable_raw
#+end_src

#+RESULTS:
#+begin_example
[4.0K]  231213_single-cable_raw             # Dataset collected the 23-12-13 contaning no processing (RAW) using a cable and a single AES
├── [5.6G]  attack.tar                      # Attack subset archive.
├── [360K]  dataset.pyc                     # Dataset Python object.
├── [4.0K]  firmware                        # Firmware used for the attacker and the victim.
│   ├── [310K]  butterly.hex                # Firmware of the attacker (Butterfly).
│   └── [417K]  nimble.hex                  # Firmware of the victim (Nimble).
├── [4.0K]  log                             # Output of used scripts.
│   ├── [5.6K]  attack_1.log                # Results of first attack.
│   └── [2.1K]  attack_2.log                # Results of second attack.
├── [4.0K]  pics                            # Images of the process (pictures or screenshots).
│   ├── [317K]  attack_align.png            # Alignment of traces during the attack.
│   ├── [484K]  attack_trace.png            # Trace used during the attack.
│   ├── [413K]  poi_1.png                   # Profile for the POI #1.
│   ├── [544K]  poi_2.png                   # Profile for the POI #2.
│   └── [483K]  profile.png                 # Correlation for all key bytes during the profiling.
├── [4.0K]  profile                         # Profile Numpy traces.
│   └── [ XXK]  *.npy
├── [4.0K]  scripts                         # Scripts used for the processing / the attack.
│   └── [ 743]  reproduce.sh                # Reproduce the attack.
├── [4.0K]  submodules                      # Git submodules used to keep track of source code for collection / attack / firmware.
│   ├── [4.0K]  butterfly                   # Sources for the attacker firmware.
│   ├── [4.0K]  screaming_channels_ble      # Sources for the collection / attack code.
│   ├── [4.0K]  screaming_channels_nimble   # Sources for the victim firmware.
│   └── [4.0K]  whad                        # Sources for the library used in our instrumentation code.
└── [ 50G]  train.tar                       # Train subset archive used for to create the profile.

10 directories, 20 files
#+end_example
