* About

Git-annex repository of datasets for the Screaming Channels on BLE project.

* Datasets

Those directories contains full or partials datasets recorded using our
=collect.sh= script.

- =231213_single-cable_raw= :: The firmware is close as stock -- only using AES
  software and increased TX power. We use a pairing to generate keys, with
  Butterfly and WHAD on the attacker side. We attacked the amplitude of the
  signal received at 2.548 GHz during the legitimate BLE transmission emitted
  when a connection is started. We do not used any averaging or instrumeted AES
  repetitions -- only offline triggering and trace alignment. We were able to
  retrieve 5 bytes of the key with a very low median/mean PGE, but the maximum
  PGE of only 1 byte don't allow an efficient bruteforce.
- =231220_single-1m-rand_raw= :: This dataset contains 16k FF traces for the
  attack subset. Just like =231213_single-cable_raw=, but with an antenna and
  with 1m of theoretical distance (40 dB of attenuation = real distance of 30
  cm + 10 dB of insertion loss of the attenuator).
- 231222_single-cable-balanced_raw ::
  - 64k of training/profiling traces and 16k of attack traces
  - Balanced generator of Google/Karel
  - RF coax. cable
  - Custom input mechanism
  - No repetitions
- =231223_single-1m-pair_raw= :: This dataset contains 32k FF traces for the
  attack subset. Recording used an antenna with 1m of theoretical distance like
  the =231220_single-1m-rand_raw= dataset. The inputs were generated using a 
  pairing. There were no instrumentation of the AES nor repetitions.
- [[file:240110_single-leak-pairing-1m-lna_raw/][240110_single-leak-pairing-1m-lna_raw]] ::
  - 16k FF traces for attack.
  - Antenna at 1m of real distance with LNA.
  - Input generated using pairing from light/non-instrumented firmware.
  - No repetitions.
  - Attacked using profile from =231222_single-cable-balanced_raw=, no better
    than key rank of 2^123.
- [[file:240112_multi-leak-insub-1m-lna_raw/][240112_multi-leak-insub-1m-lna_raw]] ::
  - 64k FF traces for train/profile with 100 AES repetitions.
  - 16k FF traces for attack with 300 AES repetitions.
  - Simple Wi-Fi antenna at 1m of real distance with 1 LNA.
  - Input generated using random from serial port using instrumented firmware.
- [[file:240112_multi-leak-insub-1m-lna_avg/][240112_multi-leak-insub-1m-lna_avg]] ::
  - Average of its RAW dataset (=train= and =attack=).
  - Contains 3 profiles with correlation around 0.25 using different number of POIs.
  - Attacked using different number of traces, different number of POIS, different
    algo (PCC & PDF).
  - Best attack using 6000 traces, 1 POI, PCC, leading to 2^59 key rank.
    Profile is =64k * 100= and Attack is =6k * 300=.
- [[file:240124_1-leak-pairing-10cm-lna_raw][240124_1-leak-pairing-10cm-lna_raw]] ::
  - 16k FF traces for attack with no repetitions.
  - Wi-Fi antenna at 10 cm of distance with LNA.
  - Input generated using pairing from light and non-instrumented firmware.
  - Best attack using 12k traces leading to key rank of 2^114 using the 64k *
    100 at 1m profile.
  - Tried to attack using the profile of =240126_300-leak-insub-10cm-lna_avg=,
    but no better than 2^114.
- [[file:240126_300-leak-insub-10cm-lna_raw][240126_300-leak-insub-10cm-lna_raw]] ::
  - 64k FF traces for train/profile with 300 AES repetitions.
  - 8k FF traces for attack with 300 AES repetitions (configured for 16k but
    not terminated because of lack of space).
  - Wi-Fi antenna at 10 cm of distance with LNA.
  - Input generated using random from serial port using instrumented firmware.
- [[file:240126_300-leak-insub-10cm-lna_avg/][240126_300-leak-insub-10cm-lna_avg]] ::
  - Average of its corresponding RAW dataset.
  - Profiles with 1, 2, 3 POIs.
  - Best attack and bruteforce with key rank = 2^27 and PGE median = 1 for 2k
    traces.
- [[file:240207_1-leak-pairing-10cm-anechoic-2.533e9-8e6_raw]] ::
  - 32k profile traces.
  - 4k attack traces.
  - Anechoic box, no LNA, small Wi-Fi antenna.
  - 2.533 GHz of center frequency, 8 MHz of bandwidth.
  - Input generated using pairing from stock firmware.
  - No repetitions nor for profile or attack.
  - Profiled using amplitude, correct profile with clear correlation around 0.1
    to 0.2.
  - Profiled using phase, unusable profile but with a half of the subkeys
    having a correlation peak.
  - Attack using =AMPLITUDE_16384= profile and 16k attack traces succeed with 2^34 key rank.
  - Attack using =AMPLITUDE_32768= profile and 16k attack traces succeed with 2^31 key rank.
  - Attack using =AMPLITUDE_65536= profile and 16k attack traces succeed with 2^30 key rank.
  - Attack using =PHASE_ROT_65536= profile and 16k attack traces lowered the key rank to 2^93.
- [[file:240222_custom_firmware_phase_eval]] ::
  - ~11k * 300 (rep) profile traces (amplitude + phase rotation, no IQ).
  - ~16k * 300 (rep) attack traces. (amplitude + phase rotation, no IQ).
  - Anechoic box, no LNA, small Wi-Fi antenna.
  - 2.512 GHz of center frequency, 8 MHz of bandwidth.
  - Custom firmware from Giovanni, only carrier (without modulation) and AES software.
  - Correlation of about ~0.9 for amplitude profile and about ~1 for phase profile.
  - Both attacks are very effective, lowering the key rank to 2^30 using 30 to
    300 attack traces.

* Recordings

Those directories contains various signals used in experiments.

- [[file:240108_advertisement][240108_advertisement]] :: BLE advertisement recorded on channel 37 at 2.402 GHz
  using a coaxial cable in anechoic box. Used to demodulate data from the
  recording and compare with the reported data from the sniffer. Results:
  demodulation successful with GR, partially successful with custom Python
  script.
- [[file:240109_leakage_for_demod/][240109_leakage_for_demod]] :: Recording of BLE channel + AES leak to try
  demodulating it. Same hardware setup as =240108_advertisement=. Provides
  =whadsniff= logs as well.
- [[file:240111_leakage_for_demod_low_sr][240111_leakage_for_demod_low_sr]] :: Same as =240109_leakage_for_demod= but with
  lower sample rate.
- [[file:240111_gio_firmware_leak][240111_gio_firmware_leak]] :: Recording using Giovanni's firmware. Modified
  version to only output fixed payload in the modulated packet (BUT with random
  address and whitening enabled). The TX is ON sending modulated fixed packets
  with a bunch of AES, then no CPU activity, and another bunch of AES.
- [[file:240116_gio_firmware_leak_2][240116_gio_firmware_leak_2]] ::
  - Modified version of Giovanni firmware output the following pattern on the
    radio with constant time : TX OFF, TX ON, TX ON + AES.
  - Address and payloads are constants =0x0f=.
  - In =whiten_on=, whitening is enabled =RADIO_PCNF1_WHITEEN_Enabled=.
  - In =whiten_off=, whitening is disabled =RADIO_PCNF1_WHITEEN_Disabled=.
  - Multiples sample rates are tried.
  - Multiples frequencies should be tried but not recorded yet.
- [[file:240130_carrier_or_mod_soft_or_hard/][240130_carrier_or_mod_soft_or_hard]] ::
  - Built upon =240116_gio_firmware_leak_2=, but with following pattern: TX OFF,
    TX ON, Software AES, Hardware AES.
  - =tx-mod= indicate TX ON corresponds to modulated carrier with constant packets.
  - =tx-carrier= indicate TX ON corresponds to non-modulated constant carrier.
  - Two sample rates: $8e6$ and $20e6$.
- [[file:240131_with_aes_ecb_hard/][240131_with_aes_ecb_hard]] ::
  - Build upon =240130_carrier_or_mod_soft_or_hard=, but with following pattern:
    1) TX OFF
    2) TX ON with carrier only
    3) AES-ECB software implemented by TinyAES from the NordicSDK
    4) AES-ECB hardware by the ECB periph of the nRF52
    5) AES-CCM hardware by the CCM periph of the nRF52
  - Use 3 sampling rates:
    1) 8 Msps
    2) 20 Msps
    3) 56 Msps

* Experiments
:PROPERTIES:
:DIR:      experiments
:END:

** [2024-01-30 mar.] Instantaneous phase visualization
:PROPERTIES:
:DIR:      experiments/2024-01-30_instant_phase_viz
:END:

- Goals ::
  - Compare the instantaneous phase of signals recorded during TX on (carrier only), AES software, AES hardware.
- Results ::
  - Significant deviations between signals.

** [2024-02-06 mar.] Instrument a firmware and compare leakage among frequencies in amplitude and phase
:PROPERTIES:
:DIR:      experiments/2024-02-06_firmware-instrumentation-for-phase-rot-leak
:END:

- Goals ::
  1. Compare the leakage in amplitude and phase rotation to see if we can see the signal.
- Methods ::
  1. Instrument the firmware with a recognizable pattern (TX Off, TX Carrier,
     AES Soft ECB, AES Hard ECB without counter, AES Hard ECB with interrupts,
     AES Hard CCM).
  2. Record at multiple frequencies and sampling rates. Analyze the received
     signal in bot amplitude and phase rotation.
- Results ::
  1. The DC/DC regulator enabled by the DCDCEN register seems to influence a
     bit the leakage at the carrier, but it is not strongly different. We
     compared the spectrums to see a difference.
  2. With its [nRF52] clock at 64 MHz and its sub-clocks at 32, 16 and 1 MHz,
     we can see that they are all inter-modulated with the carrier and that the
     AES signal its itself modulated around each clock and sub-clock. Hence, we
     find the signal in a very wide-band spectrum. However, attenuation is not
     equal across the spectrum, hence, it is important to select the right
     frequency. Good example is by looking at 2.496e9 for the 3rd harmonic of
     the 32 MHz sub-clock.
  3. The best frequency found was 2.510 and 2.512 with 8 MHz of bandwidth to
     have the more stronger leak. It needs to be evaluated for each setup
     before launching a Screaming Channel, but it is not as trivial as using
     the 2nd harmonic (2.528 GHz).
  4. The leakage in the phase is already present in the baseband signal
     modulated around the clocks of the CPU. Hence, it may invalidate the
     theory that the SC phase leakage is produced by voltage variations of the
     VCO of the carrier.
- Files ::
  - When nothing is specified in filenames, the DCDCEN is set to 0.
  - FF is collected using an antenna in an anechoic box.
  - NF is collected using a NF probe out of the anechoic box.
  - [[attachment:firmware_loop.c]] is an extract of the firmware to see the
    pattern, see firmware repo and tag for code.

** [2024-02-07 mer.] Comparison between leakage in amplitude and phase
:PROPERTIES:
:DIR:      experiments/2024-02-07_leakage_comparison_amplitude_phase_rot
:END:

- Random plot without scripts of SC leakage in amplitude and in phase rotation
  at 2.530 GHz during a BLE communication (with GFSK).

** [2024-02-07 mer.] Find the best frequency before a dataset collection using BLE
:PROPERTIES:
:DIR:      experiments/2024-02-07_find-best-ble-freq
:END:

- Goals :: Find the best frequency where the leakage is more present before
  launching a new collection.
- Methods ::
  1. Find candidates frequency using wide-band recording looking at the
     spectrum.
  2. Compare the SNR and visually both amplitude and phase rotation signal for
     each frequency.
- Results ::
  1. Find that 2.533 GHz seems to be the best.
  2. Plot a comparison and good match between amplitude and phase rotation
     signal.

* Organization

Here is an example of a complete dataset stored after an attack:

#+begin_src bash :results output :exports results :eval never
tree -alh -I "attack/" -I "train/" -L 2 231213_single-cable_raw
#+end_src

#+RESULTS:
#+begin_example
[4.0K]  231213_single-cable_raw             # Dataset collected the 23-12-13 contaning no processing (RAW) using a cable and a single AES
├── [5.6G]  attack.tar                      # Attack subset archive.
├── [360K]  dataset.pyc                     # Dataset Python object.
├── [4.0K]  firmware                        # Firmware used for the attacker and the victim.
│   ├── [310K]  butterly.hex                # Firmware of the attacker (Butterfly).
│   └── [417K]  nimble.hex                  # Firmware of the victim (Nimble).
├── [4.0K]  log                             # Output of used scripts.
│   ├── [5.6K]  attack_1.log                # Results of first attack.
│   └── [2.1K]  attack_2.log                # Results of second attack.
├── [4.0K]  pics                            # Images of the process (pictures or screenshots).
│   ├── [317K]  attack_align.png            # Alignment of traces during the attack.
│   ├── [484K]  attack_trace.png            # Trace used during the attack.
│   ├── [413K]  poi_1.png                   # Profile for the POI #1.
│   ├── [544K]  poi_2.png                   # Profile for the POI #2.
│   └── [483K]  profile.png                 # Correlation for all key bytes during the profiling.
├── [4.0K]  profile                         # Profile Numpy traces.
│   └── [ XXK]  *.npy
├── [4.0K]  scripts                         # Scripts used for the processing / the attack.
│   └── [ 743]  reproduce.sh                # Reproduce the attack.
├── [4.0K]  submodules                      # Git submodules used to keep track of source code for collection / attack / firmware.
│   ├── [4.0K]  butterfly                   # Sources for the attacker firmware.
│   ├── [4.0K]  screaming_channels_ble      # Sources for the collection / attack code.
│   ├── [4.0K]  screaming_channels_nimble   # Sources for the victim firmware.
│   └── [4.0K]  whad                        # Sources for the library used in our instrumentation code.
└── [ 50G]  train.tar                       # Train subset archive used for to create the profile.

10 directories, 20 files
#+end_example
